datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Provider {
  WHATSAPP
  SMS
  EMAIL
}

enum Direction {
  IN
  OUT
}

enum Stage {
  NEW
  IN_PROGRESS
  WAITING
  DONE
}

enum Plan {
  FREE
  PRO
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String?
  emailVerified   DateTime? // verification timestamp
  accounts        Account[]
  sessions        Session[]
  contacts        Contact[]
  deals           Deal[]
  stripeCustomer  StripeCustomer?
  quickReplies    QuickReply[]
  invoices        Invoice[]
  invoiceTemplate InvoiceTemplate?
}

model Contact {
  id        String    @id @default(uuid())
  userId    String
  phone     String?
  name      String?
  email     String?
  company   String?
  notes     String?
  tag       String?
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  messages  Message[]
  User      User      @relation(fields: [userId], references: [id])
  Deal      Deal[]
  Invoice   Invoice[]

  @@unique([phone, userId], name: "phone_userId")
}

model Message {
  id        String    @id @default(uuid())
  contactId String
  userId    String
  provider  Provider
  body      String
  direction Direction @default(OUT)
  sentAt    DateTime  @default(now())

  contact Contact @relation(fields: [contactId], references: [id])

  @@index([contactId])
}

model Deal {
  id         String    @id @default(uuid())
  userId     String
  contactId  String
  user       User      @relation(fields: [userId], references: [id])
  contact    Contact   @relation(fields: [contactId], references: [id])
  stage      Stage
  reminderAt DateTime?
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  stripeId         String
  plan             Plan
  currentPeriodEnd DateTime
}

/// Fields required by next-auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Maps each SaaS tenant (user) to a Twilio phone number.
model TwilioNumber {
  phone  String @id // E.164 e.g. +15005550006
  userId String // fk â†’ User.id
}

model QuickReply {
  id     String @id @default(uuid())
  userId String
  label  String
  text   String
  user   User   @relation(fields: [userId], references: [id])
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
}

model Invoice {
  id        String        @id @default(uuid())
  userId    String
  contactId String
  invoiceNumber String?
  amount    Float
  dueDate   DateTime
  pdfUrl    String?
  status    InvoiceStatus @default(DRAFT)
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
  contact   Contact       @relation(fields: [contactId], references: [id])
}

model InvoiceTemplate {
  id           String  @id @default(uuid())
  userId       String  @unique
  logoUrl      String?
  header       String?
  body         String?
  footer       String?
  companyName  String?
  companyAddress String?
  notes        String?
  terms        String?
  accentColor  String?
  emailSubject String?
  emailBody    String?
  layout       Json?
  user         User    @relation(fields: [userId], references: [id])
}
